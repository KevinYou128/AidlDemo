apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"


    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

//    implementation 'androidx.appcompat:appcompat:1.0.2'
//    testImplementation 'junit:junit:4.12'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

/**
 * 接口版本号
 */
ext {
    versionCode = '0.0.1'
}

/**
 * @return formattedDate
 */
def getBuildTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

/**
 *
 * @param isRelease
 * @param isProguard
 * @return buildName
 */
def getBuildName(boolean isRelease) {
    def buildName = "mysdk_aidl_v" + ext.versionCode
//    + "." + getBuildTime()
    if (!isRelease) {
        buildName = buildName + "_debug"
    }
    return buildName + ".jar"
}

task makeJar(type: Copy) {
    //删除存在的
    delete 'build/libs/' + getBuildName(true)
    //设置拷贝的文件
    from('build/intermediates/packaged-classes/release/')
    //打进jar包后的文件目录
    into('build/libs/')
    //将classes.jar放入build/libs/目录下
    //include ,exclude参数来设置过滤
    //（我们只关心classes.jar这个文件）
    include('classes.jar')
    //重命名
    rename('classes.jar', getBuildName(true))
}
makeJar.dependsOn(build)
